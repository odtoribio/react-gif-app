{"version":3,"sources":["components/AddCategoryButton.js","components/GifItem.js","helpers/getGifs.js","components/GiffGrid.js","hooks/useFetchGifs.js","GiffApp.js","index.js"],"names":["AddCategoryButton","addCategory","useState","inputValue","setInputValue","onSubmit","e","preventDefault","type","value","onChange","target","GifItem","gif","title","url","className","src","alt","getGifs","category","a","fetch","response","json","data","gifs","map","id","images","downsized_medium","GiffGrid","loading","state","setState","useEffect","then","useFetchGifs","GiffApp","categories","setCategories","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAGaA,EAAoB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAEhBC,mBAAS,IAFO,mBAE7CC,EAF6C,KAEjCC,EAFiC,KAiBpD,OACE,sBAAMC,SAVe,SAACC,GACtBA,EAAEC,iBAEEJ,IACFF,EAAYE,GACZC,EAAc,MAKhB,SACE,uBACEI,KAAK,OACLC,MAAQN,EACRO,SAlBmB,SAACJ,GACxBF,EAAcE,EAAEK,OAAOF,aCNdG,EAAU,SAAC,GAAa,IAAXC,EAAU,EAAVA,IAChBC,EAAeD,EAAfC,MAAOC,EAAQF,EAARE,IACf,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCPGK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfN,EADe,iDACkCK,EADlC,+DAEEE,MAAMP,GAFR,cAEfQ,EAFe,gBAGEA,EAASC,OAHX,uBAGbC,EAHa,EAGbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAd,GAAQ,IAAD,EAC5B,MAAO,CACLe,GAAIf,EAAIe,GACRd,MAAOD,EAAIC,MACXC,IAAG,UAAEF,EAAIgB,cAAN,aAAE,EAAYC,iBAAiBf,QATjB,kBAadW,GAbc,4CAAH,sDCIPK,EAAW,SAAC,GAAoB,IAAjBX,EAAgB,EAAhBA,SAAgB,ECDhB,SAACA,GAAc,IAAD,EACdlB,mBAAS,CACjCuB,KAAK,GACLO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAcxC,OARAC,qBAAW,WACThB,EAAQC,GACLgB,MAAM,SAAAV,GAAI,OAAIQ,EAAS,CACtBT,KAAMC,EACNM,SAAS,SAEZ,CAACZ,IAEGa,EDXwBI,CAAajB,GAA/BM,EAF6B,EAElCD,KAAWO,EAFuB,EAEvBA,QAEnB,OACE,qCACE,6BAAMZ,IACJY,GAAW,aACb,qBAAKhB,UAAU,YAAf,SAEMU,EAAKC,KAAK,SAAAd,GAAG,OACX,cAAC,EAAD,CAEEA,IAAMA,GADDA,EAAIe,aEZZU,EAAU,WAAO,IAAD,EAESpC,mBAAS,IAFlB,mBAEpBqC,EAFoB,KAERC,EAFQ,KAQ3B,OACE,qCACE,iDACA,cAAC,EAAD,CAAmBvC,YAPA,SAACQ,GACtB+B,EAAc,CAAC/B,GAAF,mBAAY8B,QAOvB,uBACA,6BAEEA,EAAWZ,KAAK,SAACP,GAAD,OACd,cAAC,EAAD,CAA2BA,SAAWA,GAAtBA,Y,MCd1BqB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d8fae99f.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types'  \n\nexport const AddCategoryButton = ({ addCategory }) => {\n\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputValue = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  const handleOnSubmit = (e) => {\n    e.preventDefault()\n\n    if (inputValue){\n      addCategory(inputValue)\n      setInputValue('')\n    }\n  }\n  \n  return (\n    <form onSubmit={ handleOnSubmit }>\n      <input \n        type=\"text\"\n        value={ inputValue }\n        onChange= { handleInputValue }\n      />\n    </form>\n  )\n}\n\nAddCategoryButton.propTypes = {\n  addCategory: PropTypes.func.isRequired,\n}\n","import React from 'react'\n\nexport const GifItem = ({ gif }) => {\n  const { title, url } = gif;\n  return (\n    <div className=\"card animate__animated animate__zoomIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )\n}\n","export const getGifs = async(category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ category }&limit=10&api_key=M6oSBiGSXohVqIz2oj8wIlGHja3FjjLZ`\n  const response = await fetch(url);\n  const { data } = await response.json();\n  \n  const gifs = data.map( gif => {\n    return {\n      id: gif.id,\n      title: gif.title,\n      url: gif.images?.downsized_medium.url\n    }\n  })\n\n  return gifs;\n}\n","import React from 'react';\nimport { GifItem } from './GifItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nexport const GiffGrid = ( { category } ) => {\n\n  const { data:gifs, loading } = useFetchGifs(category)\n\n  return (\n    <>\n      <h3>{ category }</h3>\n      { loading && 'Loading...' }\n      <div className=\"card-grid\">\n          {\n            gifs.map( gif => (\n              <GifItem \n                key={gif.id} \n                gif={ gif }\n              />\n            ))\n          }\n      </div>\n    </>\n  )\n}\n","import { useState, useEffect } from 'react'\nimport { getGifs } from '../helpers/getGifs'\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data:[],\n    loading: true,\n  })  \n\n  useEffect( () => {\n    getGifs(category)\n      .then( gifs => setState({\n        data: gifs,\n        loading: false,\n      }));\n  }, [category])\n\n  return state;\n}\n","import React,  { useState } from 'react'\nimport { AddCategoryButton } from './components/AddCategoryButton'\nimport { GiffGrid } from './components/GiffGrid'\n\nexport const GiffApp = () => {\n\n  const [categories, setCategories] = useState([])\n\n  const addNewCategory = (value) => {\n    setCategories([value, ...categories])\n  }\n\n  return (\n    <>\n      <h2>Giff Expert App</h2>\n      <AddCategoryButton addCategory={ addNewCategory } />\n      <hr/>\n      <ol>\n      {\n        categories.map( (category ) => (\n          <GiffGrid key={ category } category={ category } />\n        ))\n      }\n      </ol>\n    </>\n  )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiffApp } from './GiffApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <GiffApp/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}